package graphic;

import java.util.ArrayList;

import logic.character.Pokemon;
import logic.terrain.FightMap;
import manager.GUIFightGameManager;

public class QueueBox implements IRenderable {
	
	protected static final String QUEUE_BOX_PATH = "load\\img\\queuebox\\Theme1.png";
	private static final int ORIGIN_X = 326, ORIGIN_Y = 18, WIDTH = 68, HEIGHT = 40;
	private static final int BOX_X = 320, BOX_Y = 0;
	private static ArrayList<Pokemon> pokemonsOnQueue = new ArrayList<Pokemon>();
	private static ArrayList<Pokemon> pokemonsOnMap = (ArrayList<Pokemon>) GUIFightGameManager.getFightMap().getPokemonsOnMap();
	private static int[][] blog = new int[10][2];
	private static final int REMOVE_TIME = 17, REMOVE_RATE = 4;
	private static final int DOWN_TIME = 10, DOWN_RATE = 4;
	private static int removeTimeCounter = 0, downTimeCounter = 0;
	private static boolean remove = false, up = false, down = false, insert = false;
			
	public QueueBox() {
		// TODO Auto-generated constructor stub
		for (Pokemon pokemon : pokemonsOnMap) {
			pokemonsOnQueue.add(pokemon);
		}
	}
	
	@Override
	public void draw() {
		// TODO Auto-generated method stub
		boolean equal = true;
		if(pokemonsOnQueue.size() == pokemonsOnMap.size())
		for (int i = 0; i < pokemonsOnQueue.size(); i++) {
			if(pokemonsOnQueue.get(i) != pokemonsOnMap.get(i)){
				equal = false;
			}
		}
		else{
			equal = false;
		}
		if(equal){
			update();
		}
		DrawingUtility.drawQueueBox();
	}
	
	@Override
	public void getDepth() {
		// TODO Auto-generated method stub
		
	}
	
	private void update(){
		if(!remove){
			remove();
		}
		else if(!up){
			up();
		}
		else if(!down){
			down();
		}
		else if(!insert){
			insert();
		}
		else{
			pokemonsOnQueue.clear();
			for (Pokemon pokemon : pokemonsOnMap) {
				pokemonsOnQueue.add(pokemon);
			}
		}
	}
	
	private void remove(){
		if(removeTimeCounter == REMOVE_TIME){
			removeTimeCounter = 0;
			for (int i = pokemonsOnQueue.size() - 1; i > -1; i--) {
				if(!pokemonsOnMap.contains(pokemonsOnQueue.get(i))){
					pokemonsOnQueue.remove(i);
				}
			}
			remove = true;
		}
			for (Pokemon pokemon : pokemonsOnQueue) {
				if(!pokemonsOnMap.contains(pokemon)){
					blog[pokemonsOnQueue.indexOf(pokemon)][0] += REMOVE_RATE;
				}
			}
	}
	
	private void up(){
		
	}
	
	private void down(){
		
	}
	
	private void insert(){
		
	}
	
	public static int getBOX_X() {
		return BOX_X;
	}
	
	public static int getBOX_Y() {
		return BOX_Y;
	}
	
	public static ArrayList<Pokemon> getPokemonsOnQueue() {
		return pokemonsOnQueue;
	}
	
	public static int getOriginX() {
		return ORIGIN_X;
	}
	
	public static int getOriginY() {
		return ORIGIN_Y;
	}
	
	public static int getWidth() {
		return WIDTH;
	}
	
	public static int getHeight() {
		return HEIGHT;
	}

}
