package graphic;

import java.io.File;
import java.util.Arrays;
import java.util.List;

import com.sun.javafx.tk.Toolkit;

import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;
import javafx.scene.image.PixelReader;
import javafx.scene.image.PixelWriter;
import javafx.scene.image.WritableImage;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import logic_fight.character.activeSkill.ActiveSkill;
import logic_fight.character.pokemon.Pokemon;
import logic_fight.character.pokemon.Status;
import logic_fight.player.HumanPlayer;
import logic_fight.terrain.FightMap;
import logic_fight.terrain.FightTerrain;
import logic_world.player.PlayerCharacter;
import logic_world.terrain.WorldMap;
import logic_world.terrain.WorldObject;
import manager.GUIFightGameManager;
import manager.WorldManager;

public class DrawingUtility {

	private static final int HP_BAR_SIZE_X = 30;
	private static final int HP_BAR_SIZE_Y = 6;
	private static final int HP_BAR_OFFSET_X = 5;
	private static final int HP_BAR_OFFSET_Y = 32;
	private static final Color HP_GREEN = Color.LAWNGREEN;
	private static final Color HP_RED = Color.RED;

	private static Image shadow;
	private static Image cursor;
	private static Image highlight;

	private static Image qimg;
	private static Image sign;
	private static Image itemIcon;
	private static Image pkmnBar;
	private static GraphicsContext gc;

	public DrawingUtility() {
		// TODO Auto-generated constructor stub
		File sfile = new File("load\\img\\terrain\\shadow20.png");
		shadow = new Image(sfile.toURI().toString());
		File cfile = new File("load\\img\\terrain\\cursur.png");
		cursor = new Image(cfile.toURI().toString());
		File hfile = new File("load\\img\\terrain\\highlight.png");
		highlight = new Image(hfile.toURI().toString());

		File qfile = new File(QueueBox.QUEUE_BOX_PATH);
		qimg = resize(new Image(qfile.toURI().toString()), 2);

		File signfile = new File("load\\img\\dialogbox\\Theme1_sign.gif");
		sign = new Image(signfile.toURI().toString());
		
		File itemfile = new File("load\\img\\HUD\\itemicon.png");
		itemIcon = resize(new Image(itemfile.toURI().toString()), 2);
		File pkmnfile = new File("load\\img\\HUD\\pokemonbar.png");
		pkmnBar = new Image(pkmnfile.toURI().toString());
	}

	public static void drawFightMap(FightMap fightMap) {
		// for (FightTerrain[] fightTerrains : fightMap.getMap()) {
		// for (FightTerrain fightTerrain : fightTerrains) {
		// fightTerrain.draw();
		// }
		// }
		Arrays.asList(fightMap.getMap()).stream().flatMap((FightTerrain[] ft) -> Arrays.asList(ft).stream())
				.forEach(ft -> ft.draw());
		fightMap.getPokemonsOnMap().forEach(p -> p.draw());
		// for (int i = 0; i < fightMap.getPokemonsOnMap().size(); i++) {
		// fightMap.getPokemonsOnMap().get(i).draw();
		// }
		gc.drawImage(itemIcon, 10, 246);
		fightMap.getPokemonsOnMap().forEach(p -> drawPokemonBar(p));
	}

	public static void drawFightTerrain(FightTerrain fightTerrain) {
		int fightTerrainSizeX = fightTerrain.getX() * FightTerrain.IMG_SIZE_X;
		int fightTerrainSizeY = fightTerrain.getY() * FightTerrain.IMG_SIZE_Y;

		gc.drawImage(fightTerrain.getTerrainImage(), fightTerrainSizeX, fightTerrainSizeY);
		if (fightTerrain.isShadowed()) {
			gc.drawImage(shadow, fightTerrainSizeX, fightTerrainSizeY);
		}
		if (fightTerrain.isCursor()) {
			gc.drawImage(cursor, fightTerrainSizeX, fightTerrainSizeY);
			fightTerrain.setCursor(false);
		}
		if (fightTerrain.isHighlight()) {
			gc.drawImage(highlight, fightTerrainSizeX, fightTerrainSizeY);
		}
	}

	public static void drawPokemon(Pokemon pokemon) {
		if (pokemon.getCurrentFightTerrain() == null) {
			return;
		}
		int x = pokemon.getCurrentFightTerrain().getX();
		int y = pokemon.getCurrentFightTerrain().getY();
		gc.drawImage(pokemon.getImage(), x * FightTerrain.IMG_SIZE_X, y * FightTerrain.IMG_SIZE_Y);
		/*
		 * Image img = new ImageIcon(pokemon.getImageName()).getImage();
		 * gc.drawImage(img, pokemon.getX() * 40, pokemon.getY() * 40, 40, 40,
		 * null);
		 */
		gc.setStroke(Color.BLACK);
		gc.setLineWidth(1);
		gc.strokeRect(x * FightTerrain.IMG_SIZE_X + HP_BAR_OFFSET_X, y * FightTerrain.IMG_SIZE_Y + HP_BAR_OFFSET_Y,
				HP_BAR_SIZE_X, HP_BAR_SIZE_Y);
		gc.setFill(HP_RED);
		gc.fillRect(x * FightTerrain.IMG_SIZE_X + HP_BAR_OFFSET_X, y * FightTerrain.IMG_SIZE_Y + HP_BAR_OFFSET_Y,
				HP_BAR_SIZE_X, HP_BAR_SIZE_Y);
		gc.setFill(HP_GREEN);
		gc.fillRect(x * FightTerrain.IMG_SIZE_X + HP_BAR_OFFSET_X, y * FightTerrain.IMG_SIZE_Y + HP_BAR_OFFSET_Y,
				(int) (pokemon.getCurrentHP() * HP_BAR_SIZE_X / pokemon.getFullHP()), HP_BAR_SIZE_Y);

		if (pokemon.getStatus().equals(Status.FREEZE)) {
			gc.setGlobalAlpha(0.4);
			gc.setFill(Color.ALICEBLUE);
			gc.fillRect(x * FightTerrain.IMG_SIZE_X, y * FightTerrain.IMG_SIZE_Y, FightTerrain.IMG_SIZE_X,
					FightTerrain.IMG_SIZE_Y);
			gc.setGlobalAlpha(1.0);
		}
	}
	
	public static void drawPokemonBar(Pokemon pokemon) {
		int position;
		int originX, originY;
		gc.setFont(Font.font("monospace", 8));
		if (pokemon.getOwner() instanceof HumanPlayer) {
			position = GUIFightGameManager.getFightMap().getPlayerPokemonsOnMap().indexOf(pokemon);
			originX = 110 + position * 120;
			originY = 249;
		}
		else{
			position = GUIFightGameManager.getFightMap().getEnemyPokemonsOnMap().indexOf(pokemon);
			originX = (10 + position * 120);
			originY = 10;
		}
		gc.setFill(Color.BLACK);
		gc.fillRect(originX + 42, originY + 27, 60, 4);
		gc.setFill(Color.LIMEGREEN);
		gc.fillRect(originX + 42, originY + 27, (pokemon.getCurrentHP() / pokemon.getFullHP()) * 60, 4);
		gc.drawImage(pkmnBar, originX, originY);
		gc.drawImage(pokemon.getIcon(), originX, originY);
		gc.setFill(Color.BLACK);
		gc.fillText(pokemon.getName(), originX + 42, originY + 10);
		gc.fillText("Lv" + pokemon.getLevel(), originX + 44, originY + 23);
		gc.fillText((int)pokemon.getCurrentHP() + "/" + (int)pokemon.getFullHP(), originX + 98 - computeStringWidth((int)pokemon.getCurrentHP() + "/" + (int)pokemon.getFullHP(), gc.getFont()), originY + 23);
		gc.setFill(Color.AQUA);
		gc.fillRect(originX + 33, originY + 37, ((pokemon.getCurrentExp() - pokemon.getLastExpRequired()) / (pokemon.getNextExpRequired() - pokemon.getLastExpRequired())) * 77, 1);
	}

	public static void drawDialogBox() {
		/*
		 * File signfile = new File("load\\img\\dialogbox\\Theme1_sign.gif");
		 * Image sign = new Image(signfile.toURI().toString());
		 */
		gc.save();
		gc.beginPath();
		gc.rect(0, DialogBox.getY() + 10, 480, 64);

		gc.drawImage(DialogBox.getDialogBoxImage(), DialogBox.getX(), DialogBox.getY());
		
		gc.clip();
		gc.setFill(Color.BLACK);
		gc.setFont(DialogBox.getFont());
		double messageHeight = new Text("Test").getLayoutBounds().getHeight();
		gc.fillText(DialogBox.getMessageOnScreen()[0], DialogBox.getX() + 25,
				DialogBox.getY() + 15 + messageHeight - DialogBox.getyShift());
		gc.fillText(DialogBox.getMessageOnScreen()[1], DialogBox.getX() + 25,
				DialogBox.getY() + 45 + messageHeight - DialogBox.getyShift());
		if (DialogBox.getEndLineWidth() != 0) {
			gc.drawImage(sign, DialogBox.getX() + 25 + DialogBox.getEndLineWidth(),
					DialogBox.getY() + DialogBox.getCurrentLine() * 25 + 14);
		}
		gc.restore();
	}

	public static void drawQueueBox() {
		/*
		 * File qfile = new File(QueueBox.QUEUE_BOX_PATH); Image qimg = new
		 * Image(qfile.toURI().toString());
		 */
		Image img;
		gc.drawImage(qimg, QueueBox.getBOX_X(), QueueBox.getBOX_Y());

		gc.save();
		gc.beginPath();
		gc.rect(QueueBox.getOriginX(), QueueBox.getOriginY(), 68, 204);
		gc.clip();
		gc.closePath();

		List<Pokemon> pokemonsOnQueue = QueueBox.getPokemonsOnQueue();
		for (int i = 0; i < pokemonsOnQueue.size(); i++) {
			img = pokemonsOnQueue.get(i).getImage();
			gc.setFill(pokemonsOnQueue.get(i).getOwner().getColor());
			gc.fillRect(QueueBox.getOriginX() + QueueBox.getDelta()[i][0] + 6,
					QueueBox.getOriginY() + QueueBox.getDelta()[i][1] + 2 + i * 40, 6, 36);
			gc.setFill(Color.BLACK);
			gc.setFont(DialogBox.getFont());
			double messageHeight = new Text("LV.").getLayoutBounds().getHeight();
			gc.fillText("Lv." + pokemonsOnQueue.get(i).getLevel(),
					QueueBox.getOriginX() + QueueBox.getDelta()[i][0] + 24,
					QueueBox.getOriginY() + QueueBox.getDelta()[i][1] + 15 + i * 40 + messageHeight);

			// pixel error test
			// gc.setColor(Color.BLUE);
			// gc.fillRect(326, 450, 68, 40);
			// gc.setColor(Color.RED);
			// gc.fillRect(326, 490, 68, 40);
			// gc.setColor(Color.GREEN);
			// gc.fillRect(326, 530, 68, 40);
			// gc.setColor(Color.BLACK);
			// gc.drawRect(326, 450, 68, 40);
			// gc.drawRect(326, 490, 68, 40);
			// gc.drawRect(326, 530, 68, 40);

			gc.drawImage(img, QueueBox.getOriginX() + QueueBox.getDelta()[i][0],
					QueueBox.getOriginY() + QueueBox.getDelta()[i][1] + i * 40);
		}
		gc.restore();

		// gif test
		/*
		 * Image img2 = new
		 * ImageIcon("load\\img\\pokemon\\Dratini.gif").getImage();
		 * gc.drawImage(img2, 0, 0, 40, 40, null);
		 */
	}

	public static void drawSkill(ActiveSkill skill) {
		int ax = skill.getAttackTerrain().getX();
		int ay = skill.getAttackTerrain().getY();
		int tx = skill.getTargetTerrain().getX();
		int ty = skill.getTargetTerrain().getY();
		Image img = skill.getCurrentImage();

		gc.save();
		gc.translate(ax * 40 + 20, ay * 40 + 20);

		// test skill
		/*
		 * ax = 2; ay = 0; tx = 0; ty = 2;
		 */

		double distance = Math.sqrt((ax - tx) * (ax - tx) + (ay - ty) * (ay - ty));
		double angle = 0;
		angle = Math.acos((tx - ax) / distance) / Math.PI * 180;
		if (ay - ty < 0) {
			angle = -angle;
		}
		if (ax - tx > 0) {
			img = verticalFlip(img);
		}

		gc.rotate(-angle);
		gc.drawImage(img, -20, -20, distance * 40 + 40, 40);
		gc.restore();
	}

	public static void drawWorldMap(WorldMap worldMap) {
		double x = WorldManager.getPlayer().getX();
		double y = WorldManager.getPlayer().getY();
		/*
		 * xoffset = x - (blocksize * 7) yoffset = y - (blocksize * 5.5)
		 */
		double xoffset = x - (32 * 7);
		double yoffset = y - (32 * 5.5);
		/*
		 * startBlockX = Math.floor(xoffset/blocksize) endBlockX = startBlockX +
		 * 16 startBlockY = Math.floor(yoffset/blocksize) endBlockY =
		 * startBlockX + 13
		 */
		int startBlockX = (int) Math.floor(xoffset / 32);
		int endBlockX = (int) Math.floor((x + (32 * 8) - 1) / 32);
		int startBlockY = (int) Math.floor(yoffset / 32);
		int endBlockY = (int) Math.floor((y + (32 * 6.5) - 1) / 32);
		int tileCode;
		for (int i = startBlockY; i <= endBlockY; i++) {
			for (int j = startBlockX; j <= endBlockX; j++) {
				tileCode = worldMap.getTerrainAt(j, i);
				if (tileCode != 0) {
					gc.drawImage(WorldMap.getImage(Math.abs(tileCode)), j * 32 - xoffset, i * 32 - yoffset, 32, 32);
				}
			}
		}
	}

	public static void drawPlayer(PlayerCharacter player) {
		// x = blocksize * 7, y = blocksize * 5.5 - (6/16 * blocksize)
		gc.drawImage(player.getCurrentImage(), 224, 164, 32, 44);
	}

	public static void drawWorldObject(WorldObject worldObject) {
		int height = (int) worldObject.getCurrentImage().getHeight();
		int width = (int) worldObject.getCurrentImage().getWidth();
		int blockX = worldObject.getBlockX();
		int blockY = worldObject.getBlockY();
		double x = WorldManager.getPlayer().getX();
		double y = WorldManager.getPlayer().getY();
		double xoffset = x - (32 * 7);
		double yoffset = y - (32 * 5.5);
		int startBlockX = (int) Math.floor(xoffset / 32);
		int endBlockX = (int) Math.floor((x + (32 * 8) - 1) / 32);
		int startBlockY = (int) Math.floor(yoffset / 32);
		int endBlockY = (int) Math.floor((y + (32 * 6.5) - 1) / 32);
		if (blockX > endBlockX || blockY < startBlockY) {
			return;
		} else if (blockX * 32 + width > xoffset || (blockY + 1) * 32 - height < yoffset + 384) {
			gc.drawImage(worldObject.getCurrentImage(), blockX * 32 - xoffset, (blockY + 1) * 32 - height - yoffset,
					width, height);
		}
	}

	public static void drawScreenEffect(ScreenEffect screenEffect) {
		gc.drawImage(screenEffect.getCurrentImage(), 0, 0);
	}

	public static double computeStringWidth(String str, Font font) {
		if (str.length() == 0 || gc == null) {
			return 0;
		} else {
			return Toolkit.getToolkit().getFontLoader().computeStringWidth(str, font);
		}
	}
	
	public static double computeStringHeight(String str, Font font) {
		if (str.length() == 0 || gc == null) {
			return 0;
		} else {
			return Toolkit.getToolkit().getFontLoader().getFontMetrics(font).getLineHeight();
		}
	}

	public static void setGC(GraphicsContext gc) {
		DrawingUtility.gc = gc;
	}

	public static GraphicsContext getGC() {
		return gc;
	}

	public static Image verticalFlip(Image img) {
		int height = (int) img.getHeight();
		int width = (int) img.getWidth();
		PixelReader pr = img.getPixelReader();
		WritableImage wimg = new WritableImage(width, height);
		PixelWriter pw = wimg.getPixelWriter();
		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				pw.setColor(x, height - 1 - y, pr.getColor(x, y));
			}
		}
		return wimg;
	}

	public static Image horizontalFlip(Image img) {
		int height = (int) img.getHeight();
		int width = (int) img.getWidth();
		PixelReader pr = img.getPixelReader();
		WritableImage wimg = new WritableImage(width, height);
		PixelWriter pw = wimg.getPixelWriter();
		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				pw.setColor(width - 1 - x, y, pr.getColor(x, y));
			}
		}
		return wimg;
	}

	public static Image resize(Image img, int i) {
		int height = (int) img.getHeight() * i;
		int width = (int) img.getWidth() * i;
		PixelReader pr = img.getPixelReader();
		WritableImage wimg = new WritableImage(width, height);
		PixelWriter pw = wimg.getPixelWriter();
		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				pw.setColor(x, y, pr.getColor((int) Math.floor(x / i), (int) Math.floor(y / i)));
			}
		}
		return wimg;
	}

}