package logic.character;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import graphic.Animation;
import graphic.DrawingUtility;
import graphic.IRenderable;
import javafx.scene.image.Image;
import logic.terrain.FightTerrain;
import utility.StringUtility;

public class ActiveSkill implements IRenderable {
	private static final double DEFAULT_POWER = 50;
	private double power;
	private String name;
	private Animation animation;
	// TODO type of active skill?
	private static ArrayList<ActiveSkill> allActiveSkills = new ArrayList<ActiveSkill>();
	private FightTerrain attackTerrain, targetTerrain;

	private ActiveSkill(String skillName, double skillPower) {
		setName(skillName);
		setPower(skillPower);
		loadAnimation();
		allActiveSkills.add(this);
	}

	public static ActiveSkill getActiveSkill(String skillName) {
		return getActiveSkill(skillName, DEFAULT_POWER, true);
	}
	
	public static ActiveSkill getActiveSkill(String skillName, double powerIfNotCreated){
		return getActiveSkill(skillName, powerIfNotCreated, true);
	}

	public static ActiveSkill getActiveSkill(String skillName, double powerIfNotCreated, boolean verbose) {
		Iterator<ActiveSkill> it = allActiveSkills.iterator();
		while (it.hasNext()) {
			ActiveSkill skill = (ActiveSkill) it.next();
			if (skill.name.equalsIgnoreCase(skillName)) {
				return skill;
			}
		}
		if (verbose) {
			System.out.println("ActiveSkill : ActiveSkill " + skillName + " not found...");
			System.out.println("ActiveSkill : Creating new ActiveSkill with power " + powerIfNotCreated + ".");
		}
		return new ActiveSkill(skillName, powerIfNotCreated);
	}

	// Array Getter
	public static List<ActiveSkill> getAllActiveSkills() {
		return Collections.unmodifiableList(allActiveSkills);
	}
	
	public static void clearAllActiveSkills(){
		allActiveSkills.clear();
	}

	// getters and setters
	public final double getPower() {
		return power;
	}

	public final String getName() {
		return name;
	}

	public final void setPower(double power) {
		this.power = power < 0 ? 0 : power;
	}

	private final void setName(String name) {
		if (name == null || name.matches("\\w") || name.length() <= 1) {
			name = "";
			System.err.println("ActiveSkill : Skill has no name!");
		} else {
			name = StringUtility.toTitleCase(name);
		}
		this.name = name;
	}
	
	public Animation getAnimation() {
		return animation;
	}
	
	public void loadAnimation() {
		if(name.equals("Flamethrower")) {
			File file = new File("load/img/skill" + name + "all.png");
			Image image = new Image(file.toURI().toString());
			animation = new Animation(image, 16);
			System.out.println("load/img/skill" + name + "all.png");
		}
	}

	@Override
	public void draw() {
		// TODO Auto-generated method stub
		DrawingUtility.drawSkill(this);
	}

	@Override
	public void getDepth() {
		// TODO Auto-generated method stub
		
	}
	
	public void setAttackTerrain(FightTerrain attackTerrain) {
		this.attackTerrain = attackTerrain;
	}
	
	public void setTargetTerrain(FightTerrain targetTerrain) {
		this.targetTerrain = targetTerrain;
	}
	
	public FightTerrain getAttackTerrain() {
		return attackTerrain;
	}
	
	public FightTerrain getTargetTerrain() {
		return targetTerrain;
	}

}
